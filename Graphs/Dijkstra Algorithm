class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
      static class pair implements Comparable<pair>{
        int dist;
        int node;
        
        public pair(int dist, int node) {
            this.dist = dist;
            this.node = node;
        }
        
        @Override
        public int compareTo(pair p1) {
            return this.dist - p1.dist;
        }
    }
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        PriorityQueue<pair> pq = new PriorityQueue<>();
        int dist[] = new int[V];
        for(int i=0; i<V; i++) {
            dist[i] = (int)1e9;
        }
        dist[S] = 0;
        pq.add(new pair(0, S));
        
        while(!pq.isEmpty()) {
            int node = pq.peek().node;
            int distance = pq.peek().dist;
            pq.remove();
            
            for(int i=0; i<adj.get(node).size(); i++) {
                int edgeWeight = adj.get(node).get(i).get(1);
                int adjNode = adj.get(node).get(i).get(0);
                
                if(edgeWeight + distance < dist[adjNode]) {
                    dist[adjNode] = edgeWeight + distance;
                    pq.add(new pair(dist[adjNode], adjNode));
                }
            }
        }
        return dist;
    }
}

